type Comment {
  id: ID!
  comment: String!
  createdAt: String!
  updatedAt: String!
  user: User!
  post: Post!
}

input CommentInput {
  comment: String!
  post: Int!
}

type Mutation {
  createPost(input: PostInput!): Post
  updatePost(id: ID!, input: PostInput!): Post
  deletePost(id: ID!): Boolean
  createToken(email: String!, password: String!): Token
  createUser(input: UserCreateInput!): User
  updateUser(input: UserUpdateInput): User
  updateUserPassword(input: UserUpdatePasswordInput): Boolean
  deleteUser: Boolean
  createComment(input: CommentInput!): Comment
  updateComment(id: ID!, input: CommentInput!): Comment
  deleteComment(id: ID!): Boolean
}

type Post {
  id: ID!
  title: String!
  content: String!
  photo: String!
  createdAt: String!
  updated: String!
  author: User!
  comments(first: Int, offset: Int): [Comment!]!
}

input PostInput {
  title: String!
  content: String!
  photo: String!
}

type Query {
  posts(first: Int, offset: Int): [Post!]!
  post(id: ID!): Post
  users(first: Int, offset: Int): [User!]!
  user(id: ID!): User
  currentUser: User
  commentsByPost(id: ID!, first: Int, offset: Int): [Comment!]!
}

type Schema {
  query: Query
  mutation: Mutation
}

type Token {
  token: String!
}

"""User definition type"""
type User {
  id: ID!
  name: String!
  email: String!
  photo: String
  createdAt: String!
  updatedAt: String!
  posts(first: Int, offset: Int): [Post!]!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String
}

input UserUpdateInput {
  name: String!
  email: String!
  photo: String
}

input UserUpdatePasswordInput {
  password: String!
}

